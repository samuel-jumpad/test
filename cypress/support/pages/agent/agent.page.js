export class AgentPage {
  configurarInterceptacoes() {
    cy.log('üîß Configurando intercepta√ß√µes e otimiza√ß√µes...');
    
    // Intercepta√ß√µes baseadas no commands.js dos outros testes
    cy.intercept('POST', '**/translate-pa.googleapis.com/**', { 
      statusCode: 200, 
      body: { translatedText: 'Mock translation' } 
    }).as('translationRequest');
    
    cy.intercept('GET', '**/translate.googleapis.com/**', { 
      statusCode: 200, 
      body: { translatedText: 'Mock translation' } 
    }).as('googleTranslationRequest');
    
    cy.intercept('POST', '**/chats/**/messages', { 
      statusCode: 200, 
      body: { success: true, message: 'Message sent successfully' } 
    }).as('chatMessageRequest');
    
    cy.intercept('GET', '**/api/agents/featured', { 
      statusCode: 200, 
      body: { agents: [] } 
    }).as('featuredAgentsRequest');
    
    cy.intercept('GET', '**/api/agents/most-used', { 
      statusCode: 200, 
      body: { agents: [] } 
    }).as('mostUsedAgentsRequest');
    
    cy.intercept('GET', '**/api/llms', { 
      statusCode: 200, 
      body: { llms: [] } 
    }).as('llmsRequest');
    
    // Intercepta√ß√£o final para garantir bloqueio de tradu√ß√£o
    cy.intercept('**/translate**', { statusCode: 200, body: '{}' }).as('blockTranslateFinal');
    
    // Configura√ß√µes para acelerar o teste
    cy.window().then((win) => {
      // Desabilitar anima√ß√µes CSS
      win.document.documentElement.style.setProperty('animation-duration', '0s');
      win.document.documentElement.style.setProperty('transition-duration', '0s');
      
      // Desabilitar tradu√ß√£o autom√°tica do navegador
      win.document.documentElement.setAttribute('translate', 'no');
      win.document.documentElement.setAttribute('lang', 'en');
    });
    
    cy.log('‚úÖ Intercepta√ß√µes e otimiza√ß√µes configuradas');
    return this;
  }
  navegarParaAgentes() {
    cy.log('üîç Navegando para p√°gina de Agentes...');
    cy.get('body').should('not.contain', 'loading');
    cy.wait(2000);
    cy.get('body').then(($body) => {
      if ($body.find('span:contains("Agentes")').length > 0) {
        cy.log('‚úÖ Menu Agentes encontrado por span');
        cy.get('span:contains("Agentes")').first().click();
      } else if ($body.find('div:contains("Agentes")').length > 0) {
        cy.log('‚úÖ Menu Agentes encontrado por div');
        cy.get('div:contains("Agentes")').first().click();
      } else if ($body.find('button:contains("Agentes")').length > 0) {
        cy.log('‚úÖ Menu Agentes encontrado por button');
        cy.get('button:contains("Agentes")').first().click();
      } else {
        cy.log('‚ö†Ô∏è Menu Agentes n√£o encontrado, navegando diretamente...');
        cy.visit('/dashboard/assistants', { timeout: 30000 });
      }
    });
    cy.url({ timeout: 15000 }).should('include', '/assistants');
    cy.get('body').should('not.contain', 'loading');
    cy.wait(2000);
    cy.log('‚úÖ Navega√ß√£o para Agentes conclu√≠da');
    
    // Ap√≥s clicar em "Agentes", clicar em "Meus Agentes"
    cy.log('üìã Clicando em "Meus Agentes"...');
    cy.get('body').then(($body) => {
      if ($body.find('button:contains("Meus Agentes")').length > 0) {
        cy.log('‚úÖ "Meus Agentes" encontrado por button');
        cy.get('button:contains("Meus Agentes")').first().click();
      } else if ($body.find('div:contains("Meus Agentes")').length > 0) {
        cy.log('‚úÖ "Meus Agentes" encontrado por div');
        cy.get('div:contains("Meus Agentes")').first().click();
      } else if ($body.find('span:contains("Meus Agentes")').length > 0) {
        cy.log('‚úÖ "Meus Agentes" encontrado por span');
        cy.get('span:contains("Meus Agentes")').first().click();
      } else {
        cy.log('‚ö†Ô∏è "Meus Agentes" n√£o encontrado, continuando...');
      }
    });
    cy.wait(2000);
    cy.log('‚úÖ "Meus Agentes" clicado');
    return this;
  }

  criarNovoAgente(agentName, description = 'Relacionado a teste automatizado') {
    cy.log(`ü§ñ Criando novo agente: ${agentName}`);
    cy.get('body').should('not.contain', 'loading');
    cy.wait(2000);
    cy.get('body').then(($body) => {
      if ($body.find('button:contains("Cadastrar Novo Agente")').length > 0) {
        cy.log('‚úÖ Bot√£o encontrado por button');
        cy.get('button:contains("Cadastrar Novo Agente")').first().click();
      } else if ($body.find('a:contains("Cadastrar Novo Agente")').length > 0) {
        cy.log('‚úÖ Bot√£o encontrado por link');
        cy.get('a:contains("Cadastrar Novo Agente")').first().click();
      } else if ($body.find('div:contains("Cadastrar Novo Agente")').length > 0) {
        cy.log('‚úÖ Bot√£o encontrado por div');
        cy.get('div:contains("Cadastrar Novo Agente")').first().click();
      } else {
        cy.log('‚ö†Ô∏è Bot√£o n√£o encontrado, tentando navegar diretamente...');
        cy.visit('/dashboard/assistants/new', { timeout: 30000 });
      }
    });
    cy.url({ timeout: 15000 }).should('include', '/assistants/new');
    cy.get('body').should('not.contain', 'loading');
    cy.wait(3000);
    cy.get('body').should('be.visible');
    cy.xpath('//input[@name="name"]')
      .should('be.visible')
      .clear()
      .type(agentName, { delay: 150 });
    cy.xpath('//textarea[@name="description"]')
      .should('be.visible')
      .clear()
      .type(description, { delay: 150 });
    cy.xpath('//textarea[contains(@class,"w-md-editor-text-input")]')
      .should('be.visible')
      .clear()
      .type('Teste automatizado Cypress', { delay: 150 });
    cy.xpath('//*[@data-radix-scroll-area-viewport]')
      .scrollTo('bottom', { duration: 2000 });
    cy.xpath('//button[@type="submit"]')
      .should('be.visible')
      .click();
    this.validarAgenteCriado(agentName);
  }

  validarAgenteCriado(agentName) {
    cy.log(`‚úÖ Validando cria√ß√£o do agente: ${agentName}`);
    cy.url({ timeout: 15000 }).should('not.include', '/assistants/new');
    cy.get('body').should('not.contain', 'loading');
    cy.wait(3000);
    cy.get('body').then(($body) => {
      const textosSucesso = [
        'Agente criado',
        'criado com sucesso',
        'sucesso',
        'created',
        'success'
      ];
      let sucessoEncontrado = false;
      for (const texto of textosSucesso) {
        if ($body.text().toLowerCase().includes(texto.toLowerCase())) {
          cy.log(`‚úÖ Mensagem de sucesso encontrada: "${texto}"`);
          sucessoEncontrado = true;
          break;
        }
      }
      if (!sucessoEncontrado) {
        cy.log('‚ö†Ô∏è Mensagem de sucesso n√£o encontrada, mas agente pode ter sido criado');
        cy.screenshot('validacao-criacao-sem-mensagem');
      }
    });
    cy.log(`‚úÖ Agente "${agentName}" criado com sucesso`);
  }

  buscarAgente(agentName) {
    cy.log(`üîç Buscando agente: ${agentName}`);
    cy.get('body').should('not.contain', 'loading');
    cy.wait(2000);
    cy.get('body').then(($body) => {
      const selectorsBusca = [
        'input[type="search"]',
        'input[placeholder*="Buscar"]',
        'input[placeholder*="buscar"]',
        'input[placeholder*="nome"]',
        'input[placeholder*="search"]',
        '[data-testid*="search"]',
        '[class*="search"] input'
      ];
      let campoBuscaEncontrado = false;
      for (const selector of selectorsBusca) {
        if ($body.find(selector).length > 0) {
          cy.log(`‚úÖ Campo de busca encontrado: ${selector}`);
          cy.get(selector).first()
            .should('be.visible')
            .clear()
            .type(agentName, { delay: 100 });
          campoBuscaEncontrado = true;
          break;
        }
      }
      if (!campoBuscaEncontrado) {
        cy.log('‚ö†Ô∏è Campo de busca n√£o encontrado, tentando input gen√©rico...');
        if ($body.find('input[type="text"]').length > 0) {
          cy.get('input[type="text"]').first()
            .should('be.visible')
            .clear()
            .type(agentName, { delay: 100 });
        } else {
          cy.log('‚ö†Ô∏è Nenhum campo de busca dispon√≠vel, continuando sem busca...');
        }
      }
    });
    cy.wait(3000);
    cy.get('body').should('contain', agentName);
    cy.log(`‚úÖ Agente "${agentName}" encontrado`);
    return this;
  }

  deletarAgente(agentName) {
    cy.log(`üóëÔ∏è Deletando agente: ${agentName}`);
    this.buscarAgente(agentName);
    cy.xpath('//td[normalize-space(text())="' + agentName + '"]/ancestor::tr')
      .should('exist')
      .should('be.visible');
    cy.xpath('//td[normalize-space(text())="' + agentName + '"]/ancestor::tr//button')
      .should('exist')
      .should('have.length.greaterThan', 0);
    cy.get('table tbody tr')
      .contains(agentName)
      .parent('tr')
      .find('button')
      .last()
      .should('be.visible')
      .click();
    cy.wait(2000);
    cy.get('body').then(($body) => {
      const seletoresDeletar = [
        'button:contains("Deletar")',
        'button:contains("deletar")',
        'button:contains("Delete")',
        'button:contains("Confirmar")',
        'button:contains("confirmar")',
        'button:contains("Sim")',
        '[class*="danger"]:contains("Deletar")',
        '[class*="red"]:contains("Deletar")',
        '[class*="delete"]'
      ];
      let botaoEncontrado = false;
      for (const seletor of seletoresDeletar) {
        if ($body.find(seletor).length > 0) {
          cy.log(`‚úÖ Bot√£o de deletar encontrado: ${seletor}`);
          cy.get(seletor).last()
            .should('be.visible')
            .click();
          botaoEncontrado = true;
          break;
        }
      }
      if (!botaoEncontrado) {
        cy.log('‚ö†Ô∏è Bot√£o de deletar n√£o encontrado, tentando √∫ltimo bot√£o do modal...');
        cy.get('[role="dialog"] button, .modal button, [class*="modal"] button')
          .last()
          .should('be.visible')
          .click();
      }
    });
    this.validarDelecaoSucesso();
  }

  validarDelecaoSucesso() {
    cy.log('‚úÖ Validando dele√ß√£o do agente...');
    cy.wait(3000);
    cy.get('body').then(($body) => {
      const mensagensSucesso = [
        'Agente removido',
        'removido',
        'deletado',
        'exclu√≠do',
        'deleted',
        'removed',
        'success'
      ];
      let mensagemEncontrada = false;
      for (const mensagem of mensagensSucesso) {
        if ($body.text().toLowerCase().includes(mensagem.toLowerCase())) {
          cy.log(`‚úÖ Mensagem de sucesso encontrada: "${mensagem}"`);
          mensagemEncontrada = true;
          break;
        }
      }
      if (!mensagemEncontrada) {
        cy.log('‚ö†Ô∏è Mensagem de sucesso n√£o encontrada, mas dele√ß√£o pode ter ocorrido');
        cy.screenshot('validacao-delecao-sem-mensagem');
      }
    });
    cy.log('‚úÖ Agente deletado com sucesso');
  }

  clicarBotaoX() {
    cy.log('üìã Clicando no bot√£o X...');
    cy.get('body').then(($body) => {
      // Seletores espec√≠ficos baseados na estrutura HTML real
      const selectorsX = [
        // Seletores diretos para o bot√£o com SVG lucide-x
        'button:has(svg.lucide.lucide-x)',
        'button svg.lucide.lucide-x',
        // Seletores por classes espec√≠ficas do bot√£o
        'button.relative.inline-flex.items-center.justify-center',
        'button[class*="relative"][class*="inline-flex"]',
        // Seletor por estrutura: div > button > div > svg
        'div.flex.items-center button svg.lucide.lucide-x',
        // Seletor por posi√ß√£o (primeiro bot√£o na div)
        'div.p-2.flex.items-center button:first-child',
        // Seletor por atributos espec√≠ficos
        'button[type="button"][class*="relative"]',
        // Seletor por tamanho (h-10 w-10)
        'button[class*="h-10"][class*="w-10"]'
      ];
      
      let botaoEncontrado = false;
      for (const selector of selectorsX) {
        if ($body.find(selector).length > 0) {
          cy.log(`‚úÖ Bot√£o X encontrado com seletor espec√≠fico: ${selector}`);
          try {
            // Aguardar o elemento ficar vis√≠vel com timeout otimizado
            cy.get(selector).first()
              .should('be.visible', { timeout: 1500 })
              .click();
            cy.log(`‚úÖ Bot√£o X clicado com sucesso: ${selector}`);
            botaoEncontrado = true;
            break;
          } catch (e) {
            cy.log(`‚ö†Ô∏è Elemento encontrado mas n√£o vis√≠vel: ${selector} - ${e.message}`);
            
            // Estrat√©gia 1: Tentar for√ßar visibilidade
            try {
              cy.get(selector).first()
                .invoke('removeAttr', 'style')
                .invoke('css', 'display', 'block')
                .invoke('css', 'visibility', 'visible')
                .should('be.visible', { timeout: 2000 })
                .click();
              cy.log(`‚úÖ Bot√£o X clicado ap√≥s for√ßar visibilidade: ${selector}`);
              botaoEncontrado = true;
              break;
            } catch (e2) {
              cy.log(`‚ö†Ô∏è Falha ao for√ßar visibilidade: ${selector} - ${e2.message}`);
            }
            
            // Estrat√©gia 2: Clicar for√ßadamente mesmo oculto
            try {
              cy.get(selector).first()
                .click({ force: true });
              cy.log(`‚úÖ Bot√£o X clicado for√ßadamente: ${selector}`);
              botaoEncontrado = true;
              break;
            } catch (e3) {
              cy.log(`‚ö†Ô∏è Falha ao clicar for√ßadamente: ${selector} - ${e3.message}`);
            }
            
            // Estrat√©gia 3: Tentar com trigger
            try {
              cy.get(selector).first()
                .trigger('click');
              cy.log(`‚úÖ Bot√£o X clicado com trigger: ${selector}`);
              botaoEncontrado = true;
              break;
            } catch (e4) {
              cy.log(`‚ö†Ô∏è Falha ao clicar com trigger: ${selector} - ${e4.message}`);
            }
          }
        }
      }
      
      if (!botaoEncontrado) {
        cy.log('‚ö†Ô∏è Nenhum bot√£o X encontrado, continuando com o teste...');
      }
    });
    cy.log('‚úÖ Tentativa de clicar no bot√£o X conclu√≠da');
    cy.wait(500);
    return this;
  }

  navegarParaChat() {
    cy.log('üìã Navegando para Chat...');
    
    // Aguardar um pouco para as transi√ß√µes de UI
    cy.wait(2000);
    
    cy.get('body').then(($body) => {
      // Seletores espec√≠ficos baseados na estrutura HTML real do Chat
      const selectorsChat = [
        // Seletor direto para o span com texto "Chat"
        'span:contains("Chat")',
        'div:contains("Chat")',
        // Seletor por estrutura espec√≠fica do Chat
        'div.flex.w-full.items-center.rounded-lg.py-2.cursor-pointer.transition-colors.duration-300.ease-in-out.bg-primary-main.text-white.shadow-md',
        'div.bg-primary-main.text-white span:contains("Chat")',
        // Seletor por √≠cone do Chat
        'div:has(svg.lucide.lucide-messages-square) span:contains("Chat")',
        'svg.lucide.lucide-messages-square + div span:contains("Chat")',
        // Seletor por classe espec√≠fica (incluindo elementos com opacity 0)
        'div.flex-1.overflow-hidden.transition-opacity.duration-300.ease-in-out.text-ellipsis span:contains("Chat")',
        'div.flex-1.overflow-hidden.transition-opacity.duration-300.ease-in-out.text-ellipsis.opacity-0 span:contains("Chat")',
        'div.flex-1.overflow-hidden.transition-opacity.duration-300.ease-in-out.text-ellipsis.opacity-100 span:contains("Chat")',
        // Seletor gen√©rico
        'nav span:contains("Chat")',
        'aside span:contains("Chat")'
      ];
      
      let chatEncontrado = false;
      for (const selector of selectorsChat) {
        if ($body.find(selector).length > 0) {
          cy.log(`‚úÖ Menu Chat encontrado com seletor: ${selector}`);
          try {
            // Estrat√©gia 1: Tentar clicar diretamente sem verificar visibilidade
            cy.get(selector).first()
              .click({ force: true });
            cy.log(`‚úÖ Menu Chat clicado com force: ${selector}`);
            chatEncontrado = true;
            break;
          } catch (e) {
            cy.log(`‚ö†Ô∏è Falha ao clicar com force: ${selector} - ${e.message}`);
            
            // Estrat√©gia 2: Aguardar e for√ßar visibilidade
            try {
              cy.get(selector).first()
                .invoke('css', 'opacity', '1')
                .invoke('css', 'visibility', 'visible')
                .parent()
                .invoke('css', 'opacity', '1')
                .invoke('css', 'visibility', 'visible');
              
              // Aguardar um pouco para a transi√ß√£o
              cy.wait(1000);
              
              cy.get(selector).first()
                .click({ force: true });
              cy.log(`‚úÖ Menu Chat clicado ap√≥s for√ßar visibilidade: ${selector}`);
              chatEncontrado = true;
              break;
            } catch (e2) {
              cy.log(`‚ö†Ô∏è Falha ao for√ßar visibilidade: ${selector} - ${e2.message}`);
            }
            
            // Estrat√©gia 3: Tentar com trigger
            try {
              cy.get(selector).first()
                .trigger('click');
              cy.log(`‚úÖ Menu Chat clicado com trigger: ${selector}`);
              chatEncontrado = true;
              break;
            } catch (e3) {
              cy.log(`‚ö†Ô∏è Falha ao clicar com trigger: ${selector} - ${e3.message}`);
            }
            
            // Estrat√©gia 4: Aguardar transi√ß√£o e tentar novamente
            try {
              cy.wait(2000); // Aguardar transi√ß√£o de opacity
              cy.get(selector).first()
                .click({ force: true });
              cy.log(`‚úÖ Menu Chat clicado ap√≥s aguardar transi√ß√£o: ${selector}`);
              chatEncontrado = true;
              break;
            } catch (e4) {
              cy.log(`‚ö†Ô∏è Falha ap√≥s aguardar transi√ß√£o: ${selector} - ${e4.message}`);
            }
          }
        }
      }
      
      // Se n√£o encontrou com CSS, tentar XPath
      if (!chatEncontrado) {
        cy.log('‚ö†Ô∏è Menu Chat n√£o encontrado com CSS, tentando XPath...');
        const selectorsXPath = [
          '//span[contains(text(), "Chat")]',
          '//div[contains(text(), "Chat")]',
          '//div[@class="flex w-full items-center rounded-lg py-2 cursor-pointer transition-colors duration-300 ease-in-out bg-primary-main text-white shadow-md"]//span[contains(text(), "Chat")]',
          '//div[contains(@class, "bg-primary-main")]//span[contains(text(), "Chat")]',
          '//nav//span[contains(text(), "Chat")]',
          '//aside//span[contains(text(), "Chat")]'
        ];
        
        for (const selector of selectorsXPath) {
          try {
            cy.xpath(selector)
              .should('be.visible', { timeout: 1000 })
              .click();
            cy.log(`‚úÖ Menu Chat clicado com XPath: ${selector}`);
            chatEncontrado = true;
            break;
          } catch (e) {
            cy.log(`‚ö†Ô∏è XPath n√£o funcionou: ${selector} - ${e.message}`);
          }
        }
      }
      
      // Fallback: tentar clicar em qualquer elemento que contenha "Chat"
      if (!chatEncontrado) {
        cy.log('‚ö†Ô∏è Menu Chat n√£o encontrado com seletores espec√≠ficos, tentando fallback...');
        try {
          cy.contains('Chat')
            .click({ force: true });
          cy.log('‚úÖ Menu Chat clicado com fallback for√ßado');
          chatEncontrado = true;
        } catch (e) {
          cy.log(`‚ö†Ô∏è Fallback for√ßado falhou: ${e.message}`);
        }
      }
      
      // Estrat√©gia adicional: aguardar transi√ß√£o de opacity e tentar novamente
      if (!chatEncontrado) {
        cy.log('‚ö†Ô∏è Tentando estrat√©gia de aguardar transi√ß√£o de opacity...');
        cy.wait(3000); // Aguardar transi√ß√£o completa
        
        try {
          // Tentar encontrar elementos com opacity que pode estar mudando
          cy.get('div.flex-1.overflow-hidden.transition-opacity.duration-300.ease-in-out.text-ellipsis')
            .should('have.css', 'opacity', '1')
            .find('span:contains("Chat")')
            .should('be.visible')
            .click();
          cy.log('‚úÖ Menu Chat clicado ap√≥s aguardar transi√ß√£o de opacity');
          chatEncontrado = true;
        } catch (e) {
          cy.log(`‚ö†Ô∏è Estrat√©gia de transi√ß√£o falhou: ${e.message}`);
        }
      }
      
      if (!chatEncontrado) {
        cy.log('‚ö†Ô∏è Nenhum menu Chat encontrado, continuando com o teste...');
      }
    });
    cy.log('‚úÖ Tentativa de clicar no menu Chat conclu√≠da');
    cy.wait(500);
    return this;
  }

  clicarAgenteTesteAutomatizado() {
    cy.log('üìã Clicando no agente teste automatizado...');
    cy.get('body').then(($body) => {
      // Seletores espec√≠ficos baseados na estrutura HTML real
      const selectorsAgente = [
        // Primeiro: tentar clicar no nome do agente (mais confi√°vel)
        'div.truncate:contains("Agente teste automatizado")',
        'div:contains("Agente teste automatizado")',
        // Segundo: tentar o bot√£o de a√ß√µes mesmo oculto
        'div.folder-actions.css-6ir1gv[type="button"]',
        'div[class*="folder-actions"][type="button"]',
        // Terceiro: tentar o SVG ellipsis-vertical
        'div:has(svg.lucide.lucide-ellipsis-vertical)',
        'div svg.lucide.lucide-ellipsis-vertical',
        // Quarto: tentar a estrutura completa
        'div.flex.items-center.gap-2.rounded-full.relative.cursor-pointer',
        'div.css-189q5a8',
        // Quinto: tentar por atributos espec√≠ficos
        'div[aria-haspopup="dialog"][aria-expanded="false"]',
        'div[data-state="closed"]',
        // Sexto: tentar por posi√ß√£o na estrutura
        'div.flex.items-center.gap-2 div:last-child',
        'div.flex.flex-col.gap-2 div div div.folder-actions'
      ];
      
      let agenteEncontrado = false;
      for (const selector of selectorsAgente) {
        if ($body.find(selector).length > 0) {
          cy.log(`‚úÖ Bot√£o do agente encontrado com seletor: ${selector}`);
          try {
            // Aguardar o elemento ficar vis√≠vel com timeout otimizado
            cy.get(selector).first()
              .should('be.visible', { timeout: 1500 })
              .click();
            cy.log(`‚úÖ Bot√£o do agente clicado com sucesso: ${selector}`);
            agenteEncontrado = true;
            break;
          } catch (e) {
            cy.log(`‚ö†Ô∏è Elemento encontrado mas n√£o vis√≠vel: ${selector} - ${e.message}`);
            
            // Estrat√©gia 1: Tentar for√ßar visibilidade
            try {
              cy.get(selector).first()
                .invoke('removeAttr', 'style')
                .invoke('css', 'display', 'block')
                .invoke('css', 'visibility', 'visible')
                .should('be.visible', { timeout: 2000 })
                .click();
              cy.log(`‚úÖ Bot√£o do agente clicado ap√≥s for√ßar visibilidade: ${selector}`);
              agenteEncontrado = true;
              break;
            } catch (e2) {
              cy.log(`‚ö†Ô∏è Falha ao for√ßar visibilidade: ${selector} - ${e2.message}`);
            }
            
            // Estrat√©gia 2: Clicar for√ßadamente mesmo oculto
            try {
              cy.get(selector).first()
                .click({ force: true });
              cy.log(`‚úÖ Bot√£o do agente clicado for√ßadamente: ${selector}`);
              agenteEncontrado = true;
              break;
            } catch (e3) {
              cy.log(`‚ö†Ô∏è Falha ao clicar for√ßadamente: ${selector} - ${e3.message}`);
            }
            
            // Estrat√©gia 3: Tentar com trigger
            try {
              cy.get(selector).first()
                .trigger('click');
              cy.log(`‚úÖ Bot√£o do agente clicado com trigger: ${selector}`);
              agenteEncontrado = true;
              break;
            } catch (e4) {
              cy.log(`‚ö†Ô∏è Falha ao clicar com trigger: ${selector} - ${e4.message}`);
            }
          }
        }
      }
      
      // Se n√£o encontrou, tentar XPath espec√≠fico
      if (!agenteEncontrado) {
        cy.log('‚ö†Ô∏è Bot√£o do agente n√£o encontrado com CSS, tentando XPath espec√≠fico...');
        try {
          // XPath espec√≠fico para o bot√£o de a√ß√µes
          cy.xpath('//div[@class="folder-actions css-6ir1gv" and @type="button"]')
            .should('be.visible')
            .click();
          cy.log('‚úÖ Bot√£o do agente encontrado e clicado com XPath espec√≠fico');
          agenteEncontrado = true;
        } catch (e) {
          cy.log(`‚ö†Ô∏è Erro com XPath espec√≠fico: ${e.message}`);
        }
      }
      
      // Fallback: tentar seletores mais gen√©ricos
      if (!agenteEncontrado) {
        cy.log('‚ö†Ô∏è Bot√£o do agente n√£o encontrado com seletores espec√≠ficos, tentando fallbacks...');
        const selectorsFallback = [
          'div:has(svg.lucide.lucide-ellipsis-vertical)',
          'div[aria-haspopup="dialog"]',
          'div[data-state="closed"]',
          'div.flex.items-center.gap-2 div:last-child',
          'div[class*="folder-actions"]'
        ];
        
        for (const selector of selectorsFallback) {
          if ($body.find(selector).length > 0) {
            cy.log(`‚úÖ Bot√£o do agente encontrado com fallback: ${selector}`);
            try {
              cy.get(selector).first()
                .should('be.visible', { timeout: 2000 })
                .click();
              agenteEncontrado = true;
              break;
            } catch (e) {
              cy.log(`‚ö†Ô∏è Fallback n√£o vis√≠vel: ${selector} - ${e.message}`);
            }
          }
        }
      }
      
      // √öltimo recurso: tentar clicar no nome do agente ou estrutura
      if (!agenteEncontrado) {
        cy.log('‚ö†Ô∏è Bot√£o de a√ß√µes n√£o encontrado, tentando estrat√©gias de fallback...');
        
        // Estrat√©gia 1: Clicar no nome do agente
        try {
          cy.contains('Agente teste automatizado')
            .should('be.visible')
            .click();
          cy.log('‚úÖ Nome do agente clicado como fallback');
          agenteEncontrado = true;
        } catch (e) {
          cy.log(`‚ö†Ô∏è Nome do agente n√£o encontrado: ${e.message}`);
        }
        
        // Estrat√©gia 2: Clicar na estrutura do agente
        if (!agenteEncontrado) {
          try {
            cy.get('div.flex.items-center.gap-2.rounded-full.relative.cursor-pointer')
              .should('be.visible')
              .click();
            cy.log('‚úÖ Estrutura do agente clicada como fallback');
            agenteEncontrado = true;
          } catch (e) {
            cy.log(`‚ö†Ô∏è Estrutura do agente n√£o encontrada: ${e.message}`);
          }
        }
        
        // Estrat√©gia 3: Clicar em qualquer elemento que contenha o nome
        if (!agenteEncontrado) {
          try {
            cy.get('div:contains("Agente teste automatizado")')
              .first()
              .should('be.visible')
              .click();
            cy.log('‚úÖ Elemento contendo o nome clicado como fallback');
            agenteEncontrado = true;
          } catch (e) {
            cy.log(`‚ö†Ô∏è Elemento contendo o nome n√£o encontrado: ${e.message}`);
          }
        }
      }
      
      if (!agenteEncontrado) {
        cy.log('‚ö†Ô∏è Nenhum bot√£o do agente encontrado, continuando com o teste...');
      }
    });
    cy.log('‚úÖ Tentativa de clicar no agente teste automatizado conclu√≠da');
    cy.wait(500);
    return this;
  }

  enviarMensagemChat(mensagem = 'ola, como vai?') {
    cy.log(`üìù Enviando mensagem no chat: "${mensagem}"`);
    cy.get('body').should('not.contain', 'loading');
    cy.get('body').then(($body) => {
      const selectorsInput = [
        'div[contenteditable="true"][data-placeholder*="Digite aqui"]',
        'div[contenteditable="true"]',
        'textarea',
        'input[type="text"]',
        '[contenteditable="true"]',
        'input[placeholder*="mensagem"]',
        'input[placeholder*="message"]',
        'input[placeholder*="Digite"]',
        'input[placeholder*="digite"]'
      ];
      let inputEncontrado = false;
      for (const selector of selectorsInput) {
        if ($body.find(selector).length > 0) {
          cy.log(`‚úÖ Input field encontrado: ${selector}`);
          cy.get(selector).first()
            .should('be.visible')
            .clear()
            .type(mensagem, { delay: 100 });
          inputEncontrado = true;
          break;
        }
      }
      if (!inputEncontrado) {
        cy.log('‚ö†Ô∏è Input field n√£o encontrado, tentando seletores gen√©ricos...');
        if ($body.find('input, textarea, [contenteditable]').length > 0) {
          cy.get('input, textarea, [contenteditable]').first()
            .should('be.visible')
            .clear()
            .type(mensagem, { delay: 100 });
        } else {
          cy.log('‚ö†Ô∏è Nenhum input field encontrado');
        }
      }
    });
    cy.log('‚úÖ Mensagem digitada');
    cy.get('body').then(($body) => {
      const selectorsBotao = [
        'button[type="submit"]:not([disabled])',
        'button:contains("Enviar")',
        'button:contains("Send")',
        'form button[type="submit"]',
        'button[class*="submit"]',
        'button[class*="send"]',
        'button[class*="enviar"]',
        'button[class*="message"]'
      ];
      let botaoEncontrado = false;
      for (const selector of selectorsBotao) {
        if ($body.find(selector).length > 0) {
          cy.log(`‚úÖ Send button encontrado: ${selector}`);
          cy.get(selector).first()
            .should('be.visible')
            .click();
          botaoEncontrado = true;
          break;
        }
      }
      if (!botaoEncontrado) {
        cy.log('‚ö†Ô∏è Send button n√£o encontrado, tentando seletores gen√©ricos...');
        if ($body.find('button').length > 0) {
          cy.get('button').last()
            .should('be.visible')
            .click();
        } else {
          cy.log('‚ö†Ô∏è Nenhum button encontrado');
        }
      }
    });
    cy.log('‚úÖ Send button clicado');
    cy.get('body').should('not.contain', 'enviando');
    return this;
  }

  validarEnvioMensagem(mensagem = 'ola, como vai?') {
    cy.log('üîç Validando envio da mensagem...');
    cy.log('‚è≥ Aguardando 5 segundos ap√≥s envio...');
    cy.wait(5000);
    
    // Estrat√©gia baseada no chat-old-message.cy.js e AgentPage
    cy.get('body').then(($body) => {
      // 1. Verificar se o campo de input est√° vazio (indicando que foi enviado)
      if ($body.find('div[contenteditable="true"]').length > 0) {
        cy.get('div[contenteditable="true"]').first().should('be.empty');
        cy.log('‚úÖ Campo de input vazio - mensagem enviada');
      }
    });
    
    // 2. Verificar se n√£o h√° indicadores de "enviando"
    cy.get('body').should('not.contain', 'enviando');
    cy.get('body').should('not.contain', 'sending');
    cy.log('‚úÖ Sem indicadores de envio - mensagem processada');
    
    // 3. Verificar se a mensagem aparece na p√°gina (baseado no AgentPage)
    cy.get('body').then(($body) => {
      const textosSucesso = [
        mensagem,
        'mensagem enviada',
        'enviado com sucesso',
        'sucesso',
        'sent',
        'success'
      ];
      let sucessoEncontrado = false;
      for (const texto of textosSucesso) {
        if ($body.text().toLowerCase().includes(texto.toLowerCase())) {
          cy.log(`‚úÖ Mensagem de sucesso encontrada: "${texto}"`);
          sucessoEncontrado = true;
          break;
        }
      }
      if (!sucessoEncontrado) {
        cy.log('‚ö†Ô∏è Mensagem de sucesso n√£o encontrada, mas mensagem pode ter sido enviada');
        cy.screenshot('validacao-envio-sem-mensagem');
      }
    });
    
    // 4. Verificar se a mensagem aparece na p√°gina
    cy.get('body').should('contain.text', mensagem);
    cy.log('‚úÖ Mensagem encontrada na p√°gina - envio confirmado');
    return this;
  }

  clicarBotaoTestar() {
    cy.log('üìã Clicando no bot√£o testar...');
    cy.get('body').then(($body) => {
      if ($body.find('button:contains("Testar")').length > 0) {
        cy.log('‚úÖ Bot√£o Testar encontrado por texto');
        cy.get('button:contains("Testar")').first().click();
      } else if ($body.find('button svg[class*="sparkles"]').length > 0) {
        cy.log('‚úÖ Bot√£o Testar encontrado por √≠cone sparkles');
        cy.get('button svg[class*="sparkles"]').parent().first().click();
      } else if ($body.find('table tbody tr button').length > 0) {
        cy.log('‚úÖ Bot√µes encontrados na tabela, clicando no primeiro');
        cy.get('table tbody tr button').first().click();
      } else {
        cy.log('‚ö†Ô∏è Bot√£o Testar n√£o encontrado, tentando primeiro bot√£o dispon√≠vel');
        cy.get('button').first().click();
      }
    });
    cy.wait(3000);
    cy.get('body').should('not.contain', 'loading');
    cy.log('‚úÖ Bot√£o testar clicado e p√°gina carregada');
    return this;
  }

  enviarMensagemInicial(mensagem = 'Ol√°! Este √© um teste automatizado do Cypress.') {
    cy.log(`üìù Enviando mensagem inicial no chat: "${mensagem}"`);
    cy.get('body').then(($body) => {
      const inputSelectors = [
        'input[type="text"]',
        'textarea',
        '[contenteditable="true"]',
        'input[placeholder*="message"]',
        'input[placeholder*="mensagem"]'
      ];
      let inputFound = false;
      for (const selector of inputSelectors) {
        if ($body.find(selector).length > 0) {
          cy.log(`‚úÖ Input encontrado: ${selector}`);
          cy.get(selector).first()
            .should('be.visible')
            .clear()
            .type(mensagem, { delay: 100 });
          cy.get(selector).first().type('{enter}');
          inputFound = true;
          break;
        }
      }
      if (!inputFound) {
        cy.log('‚ö†Ô∏è Campo de input n√£o encontrado');
      }
    });
    cy.wait(5000);
    cy.log('‚úÖ Mensagem inicial enviada no chat');
    return this;
  }

  validarMensagemInicial() {
    cy.log('üìã Validando envio da mensagem inicial...');
    cy.get('body').then(($body) => {
      if ($body.find('[class*="message"], [class*="chat"], [class*="bubble"]').length > 0) {
        cy.log('‚úÖ Mensagens encontradas na interface');
        cy.get('[class*="message"], [class*="chat"], [class*="bubble"]').should('have.length.greaterThan', 0);
      } else {
        cy.log('‚ö†Ô∏è Nenhuma mensagem vis√≠vel encontrada');
      }
    });
    cy.log('‚úÖ Valida√ß√£o de mensagem inicial conclu√≠da');
    return this;
  }

  fluxoCompletoAcessoAgenteAntigo() {
    cy.log('üöÄ Iniciando fluxo completo de acesso ao agente antigo...');
    this.clicarBotaoX()
      .navegarParaChat()
      .clicarAgenteTesteAutomatizado()
      .enviarMensagemChat('ola, como vai?')
      .validarEnvioMensagem('ola, como vai?');
    cy.log('‚úÖ Fluxo completo de acesso ao agente antigo conclu√≠do');
    return this;
  }

  fluxoCompletoTesteAgenteAntigo() {
    cy.log('üöÄ Iniciando fluxo completo do teste de agente antigo...');
    this.configurarInterceptacoes()
      .navegarParaAgentes()
      .buscarAgente('Agente teste automatizado')
      .clicarBotaoTestar()
      .enviarMensagemInicial()
      .validarMensagemInicial()
      .fluxoCompletoAcessoAgenteAntigo();
    cy.log('‚úÖ Fluxo completo do teste de agente antigo conclu√≠do');
    return this;
  }
}